:root {
    margin: 0;
    padding: 0;

    /* Depth */
    --depth-per: calc(var(--depth) * 1%);

    --depth-minus: calc(var(--depth) * -1);
    /* TranslateX top and bottom *
     * 100 / D * 50 percent
     * --depth-mod: calc( 100 / var(--depth-in));
     *
     * --depth-mod: 10; */
    --depth-mod: calc( 100 / var(--depth) );

    /* Use for 1 & 3 and top and bottom */
    --depth-side-X: calc( 100 / var(--depth)* 50%);
    --depth-top-bottom-X: calc( 100 / var(--depth-minus)* 50%);

    /* Use for Even Faces */
    --depth-mod-sides: calc(var(--depth-per)/2);
    --depth-mod-min: calc(var(--depth-mod-sides) * -1);

    /* translateY value as 1/2 the depth moves the bottom & top in due to no origin set*/
    --depth-bottom-postion-Y: calc(var(--depth-per)/2);

}

*, *::before, *::after {
    box-sizing: border-box;
}

/* 3d Transform/Perspectives
 * Thinking in 3D
 */
.cube {
    position: absolute;
    /* Setting up the 3D space */
    perspective: 100cm;
    transform-style: preserve-3d;
    /* This is done on individual items
     * transform:  rotateX(-30deg) rotateY(0); */
    /* Temporary to centre the cubes
    transform: translateX(50%); */
}

[class*="cube"] {
    width: var(--width);
    height: var(--width);
}

.cube > .face-wrapper {
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    position: absolute;
}
/* Wrapper for faces 2 and 4, back and front respectively */
.cube > div.f2 {
    transform: rotateY(90deg);
}
.cube > .top-bottom {
    transform: rotateZ(90deg);
}

/* All faces level 3 */
.inner {
    width: 100%;
    height: 100%;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    background-color: #1c5ffe;
    opacity: 0.70;
    position: absolute;
    text-align: center;
    margin: 0;
    padding: 0;
}
/* Used for a basic cube of even size */
.inner--face-1-3 {
    transform-style: preserve-3d;
    background-color: #fe3136;
    transform: rotateY(-90deg) translateX(-50%);
    transform-origin: left;
}
.inner--face-2-4 {
    transform-style: preserve-3d;
    background-color: #6bfe79;
    transform: rotateY(90deg) translateX(50%);
    transform-origin: right;
}

/* Color Faces*/
.face-1 {
    background-color: #fe3136;
}
.face-3 {
    background-color: #6bfe79;
}
.face-2 {
    background-color: #1c5ffe;
}
.face-4 {
    background-color: #a179fe;
}
.top {
    background-color: #663ec3;
}
.bottom {
    background-color: #ffa000;
}

/* Cube without and without Height  */
.cube > .cube-height {
    height: var(--height);
    display: flex;
    justify-content: center;
}
.cube-height-top {
    transform: rotateY(-90deg) translateX(-50%);
    transform-origin: left;
}
.cube-height-bottom {
    transform: translateX(var(--height)) rotateY(90deg) translateX(-50%);
    transform-origin: left;
}
/* Programming isn't a language it's a thought process */

/* Cube with Height & depth
 *
 * Odd Faces left and right */
[class*="depth"] {
  --width: 100%;
}

[class*="depth"] .f1 .inner {
    --depth-per: calc(var(--depth) * 1%);
    width: var(--depth-per);
}


[class*="depth"] .f1 .inner--face-1 {
    --depth-side-X: calc( -100 / var(--depth)* 50%);

    transform: translateX(var(--depth-side-X)) rotateY(-90deg) translateX(0);

    /* left of centre
    transform-origin: left;
    transform: translateX(var(--depth-top-bottom-X)) rotateY(-90deg) translateX(-50%);*/
}


[class*="depth"] .f1 .inner--face-3 {
    --depth-side-X: calc( 100 / var(--depth)* 50%);

    /* translateX
    d  +%
    80 62.5
    40 125   100/40 * 50%
    20 250   50% * 5 (100/20 * 50%)
    10 500   50% but as a proportion/ multiple on the depth of 10%

     */
    /*transform: translateX(50%) rotateY(90deg) translateX(0);*/
    transform: translateX(var(--depth-side-X)) rotateY(90deg);

    /* left of centre
    --depth-side-X: calc( 100 / var(--depth)* 50%);
    transform-origin: left;
    transform: translateX(var(--depth-side-X)) rotateY(90deg) translateX(-50%);*/
}

/* Even Faces f2 front and back*/
[class*="depth"] .f2 .inner--face-2 {
    --depth-per: calc(var(--depth) * 1%);
    --depth-mod-sides: calc(var(--depth-per)/2);
    --depth-mod-min: calc(var(--depth-mod-sides) * -1);

    transform: translateX(var(--depth-mod-min)) rotateY(-90deg) translateX(0);

    /* left of centre
    transform: translateX(var(--depth-mod-min)) rotateY(-90deg) translateX(-50%);
    */
}

[class*="depth"] .f2 .inner--face-4 {
    --depth-per: calc(var(--depth) * 1%);
    --depth-mod-sides: calc(var(--depth-per)/2);


    transform: translateX(var(--depth-mod-sides)) rotateY(90deg) translateX(0);
/* left of centre
transform: translateX(var(--depth-mod-sides)) rotateY(90deg) translateX(50%);
*/
}

/* Top & Bottom */
[class*="depth"] > div.top-bottom {
    --depth-per: calc(var(--depth) * 1%);
    width: var(--depth-per);
}
/* Override cube height top and bottom */
[class*="depth"] > div.top-bottom .cube-height-top {
    /* Modify variables */
    --depth-minus: calc(var(--depth) * -1);
    --depth-top-bottom-X: calc( 100 / var(--depth-minus)* 50%);

    --depth-per: calc(var(--depth) * 1%);
    --depth-bottom-postion-Y: calc(var(--depth-per)/2);

    /* Transform face */
    transform: translateX(var(--depth-top-bottom-X)) rotateY(-90deg) translateY(var(--depth-bottom-postion-Y)) translateY(-50%);
    transform-origin: unset;
}
[class*="depth"] > div.top-bottom .cube-height-bottom {
    /* Modify variables */
    --depth-minus: calc(var(--depth) * -1);
    --depth-top-bottom-X: calc( 100 / var(--depth-minus)* 50%);

    --depth-mod: calc( 100 / var(--depth) );

    --depth-per: calc(var(--depth) * 1%);
    --depth-bottom-postion-Y: calc(var(--depth-per)/2);

    /* Transform face */
    transform: translateX(var(--depth-top-bottom-X)) translateX(calc( var(--height) * var(--depth-mod) )) rotateY(90deg) translateY(var(--depth-bottom-postion-Y))  translateY(-50%);
    transform-origin: unset;
}
/* I some times program better with my eyes closed */

/* Crosshair show centre since you move items from the centre */
.crosshair-wrapper {
    height: 100px;
    width: 100px;
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    transform: translateZ(0);
}
.crosshair-vertical {
    height: 1px;
    width: 100%;
    background-color: #000000;
    position: absolute;
}
.crosshair-horizontal {
    width: 1px;
    height: 100%;
    background-color: #000000;
    position: absolute;
}